//= require 'library_info'
(function ($) {

  $(function () {
    if ($('body.blacklight-catalog-index').length) {

      $('.document').each(function() {
        var fulltext = $(this).find('.fulltext-options > ul');

        if (fulltext.length && $(this).find('.Z3988').length > 0) {
          var openUrl = $(this).find(".Z3988").attr("title");
          var spinner = $("<li />");
          var showBookLoan = openUrl.indexOf("alis_id") > -1;
          var count = showBookLoan ? 2 : 1;
          var requestAssistance    = fulltext.find('.getit-entry.request-assistance');
          var accessProhibited     = fulltext.find('.getit-entry.access-prohibited');
          var existingGetItEntries = fulltext.find('.getit-entry').length;
          var epilogue = function() {
            count--;
            if (count == 0) {
              spinner.spin(false);
              spinner.remove();
              if (fulltext.find('.getit-entry').length == existingGetItEntries) {
                if (requestAssistance.length > 0) {
                  requestAssistance.removeClass('hide');
                } else if (accessProhibited.length > 0) {
                  accessProhibited.removeClass('hide');
                } else {
                  fulltext.find('.getit-entry.not_available').removeClass('hide');
                }
              }
            }
          };

          fulltext.prepend(spinner.spin());
          spinner.spin({ length: 3, width: 2, radius: 4, left: -2, top: -14 });

          addResource(
            openUrl,
            "fulltext",
            partial(layoutIndexMod, fulltext),
            epilogue
          );

          if (showBookLoan) {
            addResource(
              openUrl,
              "loan",
              partial(layoutIndexLoan, fulltext),
              epilogue
            );
          }
        }
      });
    } else if ($('body.blacklight-catalog-show').length > 0) {
      var fulltext = $(".fulltext-header");

      if (fulltext.length && $('.Z3988').length > 0) {
        var openUrl              = $(".Z3988").attr("title");
        var spinProperties       = { length: 4, width: 3, radius: 5, top: 0 };
        var showBookLoan         = openUrl.indexOf("alis_id") > -1;
        var count                = showBookLoan ? 2 : 1;
        var accessProhibited     = $('#fulltext .fulltext-item.access-prohibited');
        var requestAssistance    = $('#fulltext .fulltext-item.request-assistance');
        var existingGetItEntries = $('#fulltext .getit-entry').length;

        var epilogue = function() {
          count--;
          if (count == 0) {
            fulltext.spin(false);

            // Remove empty list elements
            $('#fulltext > li:empty').remove();

            // Check if we need to display some other static options
            if (($(".getit-entry").length - $('.getit-entry .nal').length) == existingGetItEntries) {
              if (showBookLoan || requestAssistance.length > 0) {
                requestAssistance.removeClass('hide');
              } else if (accessProhibited.length > 0) {
                accessProhibited.removeClass('hide');
              } else {
                fulltext.after("<li class='getit-entry'><p><%= I18n.t('toshokan.tools.not_available') %></p></li>");
              }
            }
          }
        };

        var placeholder = $("<li />");
        fulltext.after(placeholder);
        fulltext.spin(spinProperties);
        addResource(
          openUrl,
          "fulltext",
          partial(layoutShow, placeholder),
          epilogue
        );

        if (showBookLoan) {
          var bookPlaceholder = $("<li />", {"class" : "getit-entry loan"});
          fulltext.after(bookPlaceholder);
          addResource(
            openUrl,
            "loan",
            partial(layoutShowLoan, bookPlaceholder),
            epilogue
          );
        }
      }
    }
  });

  /*** Getit event source function ***/

  var addResource = function (openUrl, serviceList, layoutFunc, epilogueFunc) {
    var url = [toshokan.getit.url,
               "/resolve?" + openUrl,
               "&req_id=" + userType,
               "&svc_dat=" + serviceList].join("");

    var source = new EventSource(url);
    var count = 0;

    source.onmessage = function (event) {
      layoutFunc(JSON.parse(event.data), count);
      count++;
    }

    source.onerror = function(event) {
      stop();
    }

    source.addEventListener("close", function(event) {
      stop();
    }, false);

    function stop() {
      epilogueFunc.call();
      source.close();
    }
  };

  /*** Layout functions ***/

  var layoutIndex = function (elm, data) {
    if (data != null) {
      var item = $("<li />", {
        "class"          : "getit-entry",
        text             : data.list_text,
        "title"          : data.tool_tip,
        "data-toggle"    : "tooltip",
        "data-placement" : "bottom"
      });
      // If GetIt gives us a link, show it on the index page
      if (data.url != null) {
          item.text('');
          item.append($('<a />', { text: data.list_text, "href": data.url, "target": "_blank" }));
      }

      if (data.tool_tip) {
        $(item).tooltip();
      }

      $(item).prepend("<i class='" + data.icon + "'></i>");
      elm.append(item);
      // Hide the GetIt link if we have a url - this has to be done after we've added the link to the DOM
      if (data.url != null) {
          item.siblings('.getit.pull-right').hide()
      }
    }
  };

  var layoutIndexLoan = function (elm, data) {
    if (data != null) {
      item_text = data.summary.text_long != null ? data.summary.text_long : data.summary.text;

      var item = $("<li />", {
        "class"          : "getit-entry",
        text             : item_text,
        "data-toggle"    : "tooltip",
        "data-placement" : "bottom"
      });
      $(item).prepend("<i class='icon-books'></i>");
      elm.append(item);
    }
  };

  var layoutShowLoan = function (elm, data, count) {
    if (data != null) {
      var template =
        "{{#location_list}} \
         <div><ul {{#url}}class='with-link'{{/url}} {{^url}}class='no-link'{{/url}}> \
           <li><i class='{{icon}} {{icon_color}}'/></li> \
           <li><small>{{&text}}{{#callno}} under <em>{{callno}}</em>{{/callno}} {{#showCount}}{{count}}{{/showCount}}</small></li> \
           {{#url}}<li class='pull-right'><a class='btn btn-primary btn-small' target='_blank' href='{{url}}'>{{url_text}}</a></li>{{/url}} \
         </ul></div> \
         {{/location_list}}";

      if (data.locations) {
        elm.append("<strong><i class='icon-books'></i> <%= I18n.t('toshokan.tools.borrow') %></strong> \
                    <p><small><%= I18n.t('toshokan.tools.borrow_dtu') %></small></p>");

        for (var k in data.locations) {
          elm.append ($('<p class="location"><small><i class="icon-map-marker dtu-red"></i> <a href="#dtu-locations-modal" data-toggle="modal" id="location-link">' + k + ' </a></small></p>'));
          elm.append(
            Mustache.render(
              template,
              { "location_list" : data.locations[k],
                showCount : function() {return function(count, render) { if(render(count) > 1) { return "(" + render(count) + " <%= I18n.t 'toshokan.tools.copies' %>)"; }}}
              }
            )
          );
        }
      }
    }
  }

  var layoutIndexMod= function (elm, data, count) {
    if (data != null) {
      var action = null;
      var headerElm = elm;

      if (data.subtype.match(/_scan/)) {
        if (elm.find(".order-scan").length > 0) {
          if (data.subtype == "dtic_scan") {
            action = elm.find("li.order-dtu-scan > form");
          } else if (data.subtype == "tib_scan") {
            action = elm.find("li.order-tib-scan > form");
          } else if (data.subtype == "rd_scan") {
            action = elm.find("li.order-rd-scan > form");
          }
          $(action).find("button").text(data.button_text);
          data.lead_text = action.attr("data-price");
          $(action).addClass("getit-entry");
        }
      } else if (data.subtype.match(/nal/)) {
        var otherHeader = elm.parent().find(".other-header")
        otherHeader.show();

        link = $("<a />", {
          text          : '<%= I18n.t 'toshokan.tools.nal.map' %>',
          "class"       : "fulltext btn btn-primary btn-small dropdown-toggle",
          "title"       : data.tool_tip,
          "href"        : "",
          "data-toggle" : "modal",
          "data-target" : "#nal-locations-modal",
          "target"      : "_blank"
        });

        action = $("<div />", {"class" : "nal"});
        action.append(link);

        $.each(data.urls, function () {
          if (toshokan.libraries[this.id]) {
            $('#nal-locations').append(
              '<div class="nal-location" data-url="' + this.url + '">' +
              '  <input type="checkbox" name="' + this.id + '" checked="checked"> ' +
              '  <span>' + toshokan.libraries[this.id].displayName.en + '</span>' +
              '</div>'
            );
          }
        });

        $('#nal-locations input').click(function () {
          toshokan.nal.updateMap();
        });

        $('#nal-locations-modal').on('shown.bs.modal', function () {
          toshokan.nal.updateMap();
        });

        headerElm = otherHeader;
        data.icon = 'icon-home';
        data.lead_text = data.button_text;

      } else {
        action = $("<a/>", {
          text          : data.button_text,
          "class"       : "fulltext btn btn-primary btn-small",
          "title"       : data.tool_tip,
          "href"        : data.url,
          "data-toggle" : "tooltip",
          "target"      : "_blank"
        });
      }

      if (action != null) {
        $(action).tooltip();

        var template =
          "<li class='fulltext-item getit-entry'> \
          <div class='row'> \
          <div class='col-md-2'>{{&action}} </div>\
          <div class='col-md-6'> \
          <small>{{&short_explanation}}</small> \
            {{#holdings_list.length}} \
              <div class='coverage'> \
                <p><small><%= I18n.t('toshokan.tools.coverage') %>:</small></p> \
                {{#holdings_list}} \
                  {{#embargo.length}} \
                    <p><small>Last {{#showEmbargo}}{{embargo}}{{/showEmbargo}} not available</small></p> \
                  {{/embargo.length}} \
                  {{^embargo}} \
                    <p><small> \
                    {{fromyear}}{{#fromvolume}} vol. {{fromvolume}}{{/fromvolume}}{{#fromissue}} iss. {{fromissue}}{{/fromissue}} \
                    &mdash; \
                    {{toyear}}{{#tovolume}} vol. {{tovolume}}{{/tovolume}}{{#toissue}} iss. {{toissue}}{{/toissue}} \
                    </small></p> \
                  {{/embargo}} \
                {{/holdings_list}} \
              </div> \
            {{/holdings_list.length}} \
              </div> \
            <div class='col-md-4'> \
            <div class='fulltext-action'> \
              <div class='leadtext'> \
              {{#lead_text}}<strong>{{lead_text}}</strong>{{/lead_text}}<br/> \
                {{#explanation}}<small>{{&explanation}}</small>{{/explanation}} \
              </div> \
            </div> \
            </div> \
            </div> \
          </li>" ;
        action = $("<span />").append(action);
        data.action = action.html();
        data.showEmbargo = function() {
           return function (embargo, render) {
              embargo = render(embargo).split(",");
              if(embargo[1] > 1) {
                return embargo[1] + " " + embargo[0] + "s";
              } else {
                return embargo[0];
              }
           };
        };
        if (data.holdings_list) {
          data.holdings_list.sort(function(a, b) { return a.fromyear - b.fromyear; }).reverse;
        }
        var item = Mustache.render(template, data);

      if(count == 0) {
        headerElm.append(item);
      } else {
        $(".fulltext-item").filter(":last").after(item);
      }
      }
    }
  };
  var layoutShow = function (elm, data, count) {
    if (data != null) {
      var action = null;
      var headerElm = elm;
      var headerSelector;

      if (data.subtype.match(/_scan/)) {
        if ($(".order-scan").length > 0) {
          if (data.subtype == "dtic_scan") {
            action = $("li.order-dtu-scan > form");
          } else if (data.subtype == "tib_scan") {
            action = $("li.order-tib-scan > form");
          } else if (data.subtype == "rd_scan") {
            action = $("li.order-rd-scan > form");
          }
          $(action).find("button").text(data.button_text);
          data.lead_text = action.attr("data-price");
          $(action).addClass("getit-entry");
        }
      } else if (data.subtype.match(/nal/)) {
        var otherHeader = elm.parent().find(".other-header")
        otherHeader.show();
        headerSelector = '.other-header';

        link = $("<a />", {
          text          : '<%= I18n.t 'toshokan.tools.nal.map' %>',
          "class"       : "fulltext btn btn-primary btn-small dropdown-toggle",
          "title"       : data.tool_tip,
          "href"        : "",
          "data-toggle" : "modal",
          "data-target" : "#nal-locations-modal",
          "target"      : "_blank"
        });

        action = $("<div />", {"class" : "nal"});
        action.append(link);

        $.each(data.urls, function () {
          if (toshokan.libraries[this.id]) {
            $('#nal-locations').append(
              '<div class="nal-location" data-url="' + this.url + '">' +
              '  <input type="checkbox" name="' + this.id + '" checked="checked"> ' +
              '  <span>' + toshokan.libraries[this.id].displayName.en + '</span>' +
              '</div>'
            );
          }
        });

        $('#nal-locations input').click(function () {
          toshokan.nal.updateMap();
        });

        $('#nal-locations-modal').on('shown.bs.modal', function () {
          toshokan.nal.updateMap();
        });

        headerElm = otherHeader;
        data.icon = 'icon-home';
        data.lead_text = data.button_text;

      } else {
        action = $("<a/>", {
          text          : data.button_text,
          "class"       : "fulltext btn btn-primary btn-small",
          "title"       : data.tool_tip,
          "href"        : data.url,
          "data-toggle" : "tooltip",
          "target"      : "_blank"
        });
      }

      if (action != null) {
        $(action).tooltip();

        var template =
          "<li class='fulltext-item getit-entry'> \
            <strong><i class='{{icon}}'></i>{{short_name}}</strong> ({{type}}) \
            <p><small>{{&short_explanation}}</small></p> \
            {{#holdings_list.length}} \
              <div class='coverage'> \
                <p><small><%= I18n.t('toshokan.tools.coverage') %>:</small></p> \
                {{#holdings_list}} \
                  {{#embargo.length}} \
                    <p><small>Last {{#showEmbargo}}{{embargo}}{{/showEmbargo}} not available</small></p> \
                  {{/embargo.length}} \
                  {{^embargo}} \
                    <p><small> \
                    {{fromyear}}{{#fromvolume}} vol. {{fromvolume}}{{/fromvolume}}{{#fromissue}} iss. {{fromissue}}{{/fromissue}} \
                    &mdash; \
                    {{toyear}}{{#tovolume}} vol. {{tovolume}}{{/tovolume}}{{#toissue}} iss. {{toissue}}{{/toissue}} \
                    </small></p> \
                  {{/embargo}} \
                {{/holdings_list}} \
              </div> \
            {{/holdings_list.length}} \
            <div class='fulltext-action'> \
              <div class='leadtext'> \
                {{#lead_text}}<div><strong>{{lead_text}}</strong></div>{{/lead_text}} \
                {{#explanation}}<div><small>{{&explanation}}</small></div>{{/explanation}} \
              </div> \
              <div>{{&action}}</div> \
            </div> \
          </li>" ;
        action = $("<span />").append(action);
        data.action = action.html();
        data.showEmbargo = function() {
           return function (embargo, render) {
              embargo = render(embargo).split(",");
              if(embargo[1] > 1) {
                return embargo[1] + " " + embargo[0] + "s";
              } else {
                return embargo[0];
              }
           };
        };
        if (data.holdings_list) {
          data.holdings_list.sort(function(a, b) { return a.fromyear - b.fromyear; }).reverse;
        }
        var item = Mustache.render(template, data);

        if (headerSelector) {
          if ($('#fulltext > ' + headerSelector + ' + .fulltext-item').length > 0) {
            $(".fulltext-item").filter(":last").after(item);
          } else {
            $('#fulltext > ' + headerSelector).after(item);
          }
        } else {
          if(count == 0) {
            headerElm.after(item);
          } else {
            $(".fulltext-item").filter(":last").after(item);
          }
        }
      }
    }
  };
})(jQuery);
